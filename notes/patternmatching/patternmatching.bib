
@inproceedings{sestoft_ml_1996,
	address = {Berlin, Heidelberg},
	title = {{ML} pattern match compilation and partial evaluation},
	isbn = {978-3-540-70589-5},
	abstract = {We derive a compiler for ML-style pattern matches. It is conceptually simple and produces reasonably good compiled matches. The derivation is inspired by the instrumentation and partial evaluation of naÏve string matchers. Following that paradigm, we first present a general and naÏve ML pattern matcher, instrument it to collect and exploit extra information, and show that partial evaluation of the instrumented general matcher with respect to a given match produces an efficient specialized matcher.},
	booktitle = {Partial {Evaluation}},
	publisher = {Springer Berlin Heidelberg},
	author = {Sestoft, Peter},
	editor = {Danvy, Olivier and Glück, Robert and Thiemann, Peter},
	year = {1996},
	pages = {446--464},
}

@inproceedings{maranget_compiling_2008,
	address = {New York, NY, USA},
	series = {{ML} '08},
	title = {Compiling pattern matching to good decision trees},
	isbn = {978-1-60558-062-3},
	url = {https://doi.org/10.1145/1411304.1411311},
	doi = {10.1145/1411304.1411311},
	abstract = {We address the issue of compiling ML pattern matching to compact and efficient decisions trees. Traditionally, compilation to decision trees is optimized by (1) implementing decision trees as dags with maximal sharing; (2) guiding a simple compiler with heuristics. We first design new heuristics that are inspired by necessity, a concept from lazy pattern matching that we rephrase in terms of decision tree semantics. Thereby, we simplify previous semantic frameworks and demonstrate a straightforward connection between necessity and decision tree runtime efficiency. We complete our study by experiments, showing that optimizing compilation to decision trees is competitive with the optimizing match compiler of Le Fessant and Maranget (2001).},
	urldate = {2021-04-24},
	booktitle = {Proceedings of the 2008 {ACM} {SIGPLAN} workshop on {ML}},
	publisher = {Association for Computing Machinery},
	author = {Maranget, Luc},
	month = sep,
	year = {2008},
	keywords = {decision trees, heuristics, match compilers},
	pages = {35--46},
}

@inproceedings{augustsson_compiling_1985,
	address = {Berlin, Heidelberg},
	title = {Compiling pattern matching},
	urldate = {2021-04-24},
	booktitle = {Proc. of a conference on {Functional} programming languages and computer architecture},
	publisher = {Springer-Verlag},
	author = {Augustsson, Lennart},
	month = jan,
	year = {1985},
	pages = {368--381},
}

@inproceedings{maranget_compiling_1992,
	address = {New York, NY, USA},
	series = {{LFP} '92},
	title = {Compiling lazy pattern matching},
	isbn = {978-0-89791-481-9},
	url = {https://doi.org/10.1145/141471.141499},
	doi = {10.1145/141471.141499},
	urldate = {2021-04-24},
	booktitle = {Proceedings of the 1992 {ACM} conference on {LISP} and functional programming},
	publisher = {Association for Computing Machinery},
	author = {Maranget, Luc},
	month = jan,
	year = {1992},
	pages = {21--31},
}

@inproceedings{pettersson_term_1992,
	address = {Berlin, Heidelberg},
	series = {{CC} '92},
	title = {A {Term} {Pattern}-{Match} {Compiler} {Inspired} by {Finite} {Automata} {Theory}},
	isbn = {978-3-540-55984-9},
	urldate = {2021-04-24},
	booktitle = {Proceedings of the 4th {International} {Conference} on {Compiler} {Construction}},
	publisher = {Springer-Verlag},
	author = {Pettersson, Mikael},
	month = oct,
	year = {1992},
	pages = {258--270},
}

@techreport{scott_when_2000,
	address = {USA},
	type = {Technical {Report}},
	title = {When {Do} {Match}-compilation {Heuristics} {Matter}?},
	abstract = {Modern, statically typed, functional languages define functions by pattern matching. Although pattern matching is defined in terms of sequential checking of a value against one pattern after another, real implementations translate patterns into automata that can test a value against many patterns at once. Decision trees are popular automata. The cost of using a decision tree is related to its size and shape. The only method guaranteed to produce decision trees of minimum cost requires exponential match-compilation time, so a number of heuristics have been proposed in the literature or used in actual compilers. This paper presents an experimental evaluation of such heuristics, using the Standard ML of New Jersey compiler. The principal finding is that for most benchmark programs, all heuristics produce trees with identical sizes. For a few programs, choosing one heuristic over another may change the size of a decision tree, but seldom by more than a few percent. There are, however, machine-generated programs for which the right or wrong heuristic can make enormous differences: factors of 2-20.},
	institution = {University of Virginia},
	author = {Scott, Kevin and Ramsey, Norman},
	year = {2000},
}
